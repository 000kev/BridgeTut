/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gameboard;
import cards.lib.*;
import players.lib.*;
import java.util.Random;

/**
 *
 * @author kevin
 */
public class GameBoard extends javax.swing.JFrame {

    /**
     * Creates new form board
     */
    public GameBoard() {
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        panel1 = new java.awt.Panel();
        

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(44, 107, 16));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(java.awt.Color.gray);
        setPreferredSize(new java.awt.Dimension(6000, 4500));
        getContentPane().setLayout(null);

        panel1.setBackground(new java.awt.Color(47, 144, 27));
        panel1.setLayout(null);
        
        addCards(card1,card2,card3,card4,card5,card6,card7,card8,card9,card10,card11,card12,card13);
        //card1.setBounds(1100, 420, 173, 264); card2.setBounds(1060, 420, 173, 264
        setBounds(card1,card2,card3,card4,card5,card6,card7,card8,card9,card10,card11,card12,card13);
        
        getContentPane().add(panel1);
        panel1.setBounds(0, 0, 1300, 710);

        pack();
    }// </editor-fold>                        

    public void setBounds(Card... cards) {
        int i = 1100;
        for (Card card: cards) {
            card.setBounds(i, 420, 87, 132);
            i-=40;
        }
    }
    public void addCards(Card... cards) {
        for (Card card: cards) {
            panel1.add(card);
        }
    }
    public void dealHand() {
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Board1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Board1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Board1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Board1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        panel1 = new java.awt.Panel();
        
        /* Shuffle the deck and deal the cards */
        Deck deck = new Deck();
        deck.shuffle(new Random());
      
        
        Player north, south, east, west;
        Player[] players = new Player[4];
        north = new Player(); south = new Player(); east = new Player(); west = new Player();
        players[0] = north; players[1] = south; players[2] = east; players[3] = west;
        north.assignTeam(south); south.assignTeam(north);
        east.assignTeam(west); west.assignTeam(east);
        
        while (!deck.isEmpty()) {
            for (Player player: players) {
                for (int i=1; i<=13; i++) {
                    player.addCard(deck.removeTop());
                }
            }
        }
        card1=north.getCard(0); card6=north.getCard(5); card11=north.getCard(10);
        card2=north.getCard(1); card7=north.getCard(6); card12=north.getCard(11);
        card3=north.getCard(2); card8=north.getCard(7); card13=north.getCard(12);
        card4=north.getCard(3); card9=north.getCard(8);
        card5=north.getCard(4); card10=north.getCard(9);
          
        System.out.println("North's hand");
        for (int i=0; i<13; i++) {
            System.out.println(north.getCard(i));
        }
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameBoard().setVisible(true);
            }

        });
        

    }

    // Variables declaration - do not modify                     
    private static Card card1, card2, card3, card4, card5, card6, card7, card8, card9, card10, card11, card12, card13;
    private static java.awt.Panel panel1;
    // End of variables declaration                   
}
